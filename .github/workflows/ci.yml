name: CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        toolchain: [stable, beta]
        os: [windows-2019, ubuntu-20.04, macos-10.15]
        exclude:
          - os: macos-10.15
            toolchain: beta
          - os: windows-2019
            toolchain: beta
    runs-on: ${{ matrix.os }}
    needs: clean
    steps:
      - uses: actions/checkout@v2
      - uses: seanmiddleditch/gha-setup-ninja@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            target
          key: ${{ runner.os }}-cargo-check-test-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install XCB and GL dependencies
        run: |
          sudo apt update
          sudo apt install libx11-xcb-dev libgl1-mesa-dev
        if: contains(matrix.os, 'ubuntu')

      - name: Build
        run: cargo check --features "rafx-vulkan" --manifest-path demo/Cargo.toml
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"

      - name: Run tests (vulkan)
        run: cargo test --workspace --features "rafx-vulkan" --manifest-path demo/Cargo.toml
        if: ${{ runner.os == 'Linux' && matrix.toolchain == 'stable' }}
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"

      - name: Run tests (metal)
        run: cargo test --workspace --features "rafx-metal" --manifest-path demo/Cargo.toml
        if: ${{ runner.os == 'macOS' && matrix.toolchain == 'stable' }}
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"

      - name: Run tests (gles2)
        run: cargo test --workspace --features "rafx-gles2" --manifest-path demo/Cargo.toml
        if: ${{ runner.os == 'macOS' && matrix.toolchain == 'stable' }}
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"

  deny-check:
    name: cargo-deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check ${{ matrix.checks }}

  clean:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Check the format
        run: cargo fmt --all -- --check

#    TODO: Enable this
#      - name: Run clippy
#        run: >
#          cargo clippy
#          --all-targets
#          --all-features
#          --
#          -D warnings
