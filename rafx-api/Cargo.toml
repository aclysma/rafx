[package]
name = "rafx-api"
version = "0.0.15"
authors = ["Philip Degarmo <aclysma@gmail.com>"]
edition = "2018"
description = "Rendering framework built on an extensible asset pipeline"
license = "MIT OR Apache-2.0"
readme = "../README.md"
repository = "https://github.com/aclysma/rafx"
homepage = "https://github.com/aclysma/rafx"
keywords = ["game", "rendering", "graphics"]
categories = ["game-development", "game-engines", "graphics", "multimedia", "rendering::engine"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
rafx-base = { version = "0.0.15", path = "../rafx-base" }

arrayvec = "0.7.4"
log = "0.4"
crossbeam-channel = "0.5"
fnv = "1.0"
serde = { version = "1", features = ["serde_derive"], optional = true }
serde_bytes = { version = "0.11", optional = true }
bitflags = "1.2"
profiling = "1.0.1"

# Used for debug-only tracking of resources
backtrace = { version = "0.3", optional = true }

raw-window-handle = "0.5"

# vulkan/dx12
gpu-allocator = { version = "0.22.0", default_features = false, optional = true }

# vulkan
ash = { version = "0.37", optional = true }
ash-window = { version = "0.12", optional = true }

# dx12
windows = { version = "0.44", optional=true, features = ["Win32_Foundation", "Win32_Graphics_Dxgi_Common", "Win32_Security", "Win32_System", "Win32_System_Threading", "Win32_Graphics_Direct3D", "Win32_Graphics_Direct3D12", "Win32_Graphics_Dxgi", "Win32_Graphics_Direct3D_Dxc"] }
hassle-rs = { version = "0.10.0", optional=true }

# metal
[target.'cfg(target_os="macos")'.dependencies]
metal_rs = { package = "metal", version = "0.25", optional = true }
core-graphics-types = { version = "0.1", optional = true }
# Force core-graphics-0.22.3 due to semver breakage
# https://github.com/servo/core-foundation-rs/pull/562
core-graphics = { version = "=0.22.3", optional = true }
objc = { version = "0.2.4", features = ["exception"], optional = true }
raw-window-metal = { version = "0.3.1", optional = true }
cocoa-foundation = { version = "0.1.0", optional = true }
dispatch = { version = "0.2", optional = true }
foreign-types-shared = { version = "0.1", optional = true }
block = { version = "0.1.6", optional = true }

# gl (windows)
[target.'cfg(all(not(target_arch = "wasm32"), target_os="windows"))'.dependencies]
winapi = { version = "0.3.8", features = ["libloaderapi", "minwindef", "windef", "wingdi", "winuser"], optional = true }

# gl (macOS)
[target.'cfg(all(not(target_arch = "wasm32"), target_os="macos"))'.dependencies]
cocoa = { version = "0.24.0", optional = true }
objc = { version = "0.2.7", optional = true }
core-foundation = { version = "0.9.1", optional = true }

# gl (linux)
[target.'cfg(all(not(target_arch = "wasm32"), target_os="linux"))'.dependencies]
x11 = { version = "2.3", features = ["xlib", "glx"], optional = true }

# gl (wasm)
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = "0.2.72"
web-sys = { version = "0.3.4", features = ["Document", "Element", "HtmlCanvasElement", "WebGlBuffer", "WebGlTexture", "WebGlRenderingContext", "WebGlProgram", "WebGlShader", "WebGlRenderbuffer", "Window", "WebGlFramebuffer"] }

[features]
default = []
rafx-empty = []
rafx-dx12 = ["windows", "gpu-allocator", "gpu-allocator/d3d12", "hassle-rs"]
rafx-vulkan = ["ash", "gpu-allocator", "gpu-allocator/vulkan", "ash-window"]
rafx-metal = ["metal_rs", "objc", "raw-window-metal", "cocoa-foundation", "dispatch", "foreign-types-shared", "block", "core-graphics-types", "core-graphics", "core-foundation", "cocoa"]
rafx-gles2 = ["winapi", "cocoa", "objc", "core-foundation", "x11"]
rafx-gles3 = ["winapi", "cocoa", "objc", "core-foundation", "x11"]
static-vulkan = []
serde-support = ["serde", "serde_bytes"]
track-device-contexts = ["backtrace"]
